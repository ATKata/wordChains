import java.io.IOException;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'Alec.Tunbridge' at '31/03/16 16:08' with Gradle 1.10
 *
 * @author Alec.Tunbridge, @date 31/03/16 16:08
 */
public class WordChains {

    private final ArrayList<String> dictionary;
    private final String start;
    private final String end;
    private List<String> answer;
    private List<String> possibleWords;
    private List<String> wordsOfCorrectLength;


    public WordChains(ArrayList<String> strings, String start, String end) {
        this.start = start;
        this.end = end;
        dictionary = strings;
        answer = new ArrayList<>();
    }

    public WordChains() {
        dictionary = null;
        start = null;
        end = null;
        possibleWords = null;
        answer = new ArrayList<>();
    }

    private List<String> readFile() throws URISyntaxException, IOException {
        Path path = Paths.get(ClassLoader.getSystemResource("words.txt").toURI());
        try(Stream<String> lines = Files.lines(path, Charset.forName("ISO-8859-1"))){
            return lines.collect(Collectors.toList());
        }
    }

    public List<String> findWordsOfGivenLength(List<String> words, final int length) {
        return words.stream().filter(s -> s.length() == length).collect(Collectors.toList());
    }

    public boolean areOneApart(String aString, String otherString) {
        if(aString.length() != otherString.length()){
            return false;
        }
        int characters = aString.length();
        int differences = 0;
        for(int i = 0; i< characters;i++){
            if(aString.charAt(i) != otherString.charAt(i)){
                differences++;
            }
            if(differences > 1){
                return false;
            }
        }
        return 1 == differences;
    }

    public List<String> findChain() {
        wordsOfCorrectLength = findWordsOfGivenLength(dictionary, start.length());
        return findChain(start);
    }

    private List<String> findChain(String currentWord){
        answer.add(currentWord);
        possibleWords = wordsOfCorrectLength.stream()
                .filter(s -> areOneApart(currentWord, s) && !answer.contains(s))
                .collect(Collectors.toList());

        if(possibleWords.contains(end)){
            answer.add(end);
            return answer;
        } else {
            return findChain(possibleWords.get(0));
        }
    }
}
